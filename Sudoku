import Draw
import time

#I hereby certify that this program is solely the result of my own work and is 
#in compliance with the Academic Integrity policy of the course syllabus.

#constants
BOX_DISTANCE = 51
PALLET_BUTTON_SIZE = 30 
BOARD_BUTTON_SIZE = 50 

def getClick(): 
    if Draw.mousePressed():  
        x = Draw.mouseX()
        y = Draw.mouseY()
        
        #Check if they clicked within the pallet coordinates
        if x >= 90 and x <= 360 and y >= 460 and y <= 490: 
            #Find the x coordinate of where the user clicked and subtract by 90 
            #since the cells don't start until the x position = 90 and then 
            #divide by the pallet button size and add 1 to find the 
            #exact number that was clicked since otherwise it would start from 0            
            buttonNumber = (x - 90) // PALLET_BUTTON_SIZE + 1 
            print("Clicked at:", x, y, "Returning button #:", buttonNumber, flush=True)
            return (buttonNumber,)
       
        #check if they clicked on the board
        elif x >= 0 and x <= 450 and y >= 0 and y <= 450: 
            #divide each coordinate by button size to find row and column number            
            rowNum = y // BOARD_BUTTON_SIZE 
            colNum = x // BOARD_BUTTON_SIZE
            print("Clicked at:", x, y, "Returning row, col:", rowNum, colNum, flush=True)            
            return (rowNum, colNum)
       
        else: #If the user did not click on the board or pallet 
            return (None)
        
def drawBoard(startTime, score, boards):
    #Clear the board 
    Draw.clear()
    
    #Draw the pallet 
    Draw.rect(90, 468, 270, 30)
    #There is already a line at 90 from the rectangle, so the next spot where a 
    #line is needed is 90+30=120, and since the rectangle ends at 360, the last 
    #line needed is at 330.
    for i in range(120, 331 , PALLET_BUTTON_SIZE): 
        Draw.line(i, 468, i, 497) 
    
    #Draw the numbers in the pallet using a loop
    Draw.setFontFamily('Courier')
    Draw.setFontSize(30)
    for i in range(1,10):
        #For each consecitive square, multiply the pallet button size by the 
        #number square minus one to get to the left most position of the square, 
        #and then add 90, because that is x position at which the pallet starts, 
        #and adding 6 makes the numbers in the pallet more centered.
        Draw.string(i, PALLET_BUTTON_SIZE * (i-1) + 96, 468) 
   
    #Verticle lines
    Draw.line(50, 0, 50, 458)
    Draw.line(100, 0, 100, 458)
    #Draw thick line - make two rectangles 2 pixels thick 
    Draw.rect(150, 0, 2, 458)
    Draw.rect(152, 0, 2, 458)  
    #Verticle lines    
    Draw.line(204, 0, 204, 458)
    Draw.line(254, 0, 254, 458)
    #Draw thick line - make two rectangles each 2 pixels thick 
    Draw.rect(304, 0, 2, 458)
    Draw.rect(306, 0, 2, 458)
    #Verticle lines    
    Draw.line(358, 0, 358, 458)
    Draw.line(408, 0, 408, 458)
    
    #Horizontal lines
    Draw.line(0, 50, 458, 50)
    Draw.line(0, 100, 458, 100)
    #Draw thick line - make two rectangles each 2 pixels thick 
    Draw.rect(0, 150, 458, 2)
    Draw.rect(0, 152, 458, 2)
    #Horizonatal lines
    Draw.line(0, 204, 458, 204)
    Draw.line(0, 254, 458, 254)
    #Draw thick line - make two rectangles each 2 pixels thick 
    Draw.rect(0, 304, 458, 2)
    Draw.rect(0, 306, 458, 2)
    #Horizonatal lines    
    Draw.line(0, 358, 458, 358)
    Draw.line(0, 408, 458, 408)
    Draw.line(0, 458, 458, 458)
   
    #Draw score board
    Draw.setFontSize(25) 
    Draw.string("Score: "+ str(score), 0, 500)
   
    #Draw time
    currentTime = int(time.time() - startTime)
    #Get the complete hours 
    hours = currentTime // 3600 
    #Get the number of seconds that remain from computing the complete hours and 
    #compute the minutes and seconds using this number
    remainingSeconds = currentTime % 3600 
    minutes = remainingSeconds // 60
    seconds = remainingSeconds % 60
    #Format the hours, minutes and seconds making sure that the minutes and 
    #seconds always have two digits and are filled with zeroes when needed
    elapsedTime = "%d:%02d:%02d" % (hours, minutes, seconds)
    Draw.string("Time: " + elapsedTime, 250, 500)
  
    #Draw the numbers using a nested loop
    Draw.setFontSize(45)  
    for row in range(len(boards)):
        for col in range(len(boards[row])):
            if boards[row][col] > 0:
                #Multiplying col by box distance and adding 12 ensures that the 
                #number is placed in the correct box and it is centered 
                #horizontally correctly. Multiplying row by box distance and 
                #adding 4 ensures that the number is placed in the correct box
                #and it is vertically centered 
                Draw.string(boards[row][col], col * BOX_DISTANCE + 12, row * BOX_DISTANCE + 4)
    
    Draw.show()
    
def numberOfNegatives(boards): #Count how many numbers are left to fill out 
    count = 0 
    for row in range(len(boards)): 
        for col in range(len(boards[row])):
            if boards[row][col] < 0:
                count += 1
    return count

def playGame(boards):
    #Time game started
    startTime = time.time() 
    
    #Initialize score
    score = 0     
    
    buttonNumber = None
    rowNum = None
    colNum = None    
    
    #while the board is not yet completed, continue the game
    while numberOfNegatives(boards) > 0: 
       
        #Use user input
        mouseClick = getClick()
        if mouseClick != (None): #If the user clicked either on the board or pallet
           
            if len(mouseClick) == 1: #If the user clicked within the palled
                buttonNumber = mouseClick[0]
            else: #If the user clicked on the board 
                rowNum, colNum = mouseClick       
            
            #if the user has pressed on the baord and pallet
            if buttonNumber != None and rowNum != None and colNum != None: 
                #If there is already a number on the board where the user 
                #clicked, then do not do anything
                if boards[rowNum][colNum] > 0: 
                    pass
                
                elif boards[rowNum][colNum] < 0:
                    #If the user clicked the correct number and its corresponding 
                    #position on the board, then fill in the position on the 
                    #board with that number, increment the score, and reset the 
                    #variables to be prepared for the user's next move                     
                    if boards[rowNum][colNum] * -1 == buttonNumber:
                        boards[rowNum][colNum] = buttonNumber
                        score += 1
                        buttonNumber = None
                        rowNum = None
                        colNum = None
                    
                    #If the user did not click the correct number or the correct 
                    #corresponding position, then decrement the score and reset 
                    #the variable to be prepared for the user's next move 
                    else:
                        score -= 1
                        buttonNumber = None
                        rowNum = None
                        colNum = None 
        
        drawBoard(startTime, score, boards)      
        
def main():
    Draw.setCanvasSize(458,550)    
    
    #The three boards - easy, medium and hard. The positive numbers are the 
    #ones displayed on the board, and the negative numbers are for the 
    #user to fill in
    boards =  [ [ [5,-3,-1,6,7,-2,9,-8,-4], [-6,4,9,8,3,-1,-2,-5,-7], [8,-2,-7,5,-4,-9,6,1,3], 
                [-9,6,2,4,-1,-5,-3,7,-8], [1,-8,-5,-7,-6,3,-4,2,9], [3,7,4,9,2,8,-5,-6,-1],
                [-4,9,6,1,-5,7,8,-3,2], [2,1,8,-3,-9,6,-7,4,5], [-7,5,-3,-2,8,-4,-1,9,-6] ],
                
                [ [-3,-8,-7,4,-1,-5,2,-9,-6], [-4,9,2,-7,-6,-3,-5,1,8], [5,-1,6,9,-2,-8,-4,3,-7],
                [-1,6,9,-2,-8,-4,3,-7,-5], [-7,5,-4,-3,-9,-6,-8,2,1], [8,-2,-3,1,5,7,6,-4,9], 
                [-2,-7,-5,-8,3,-1,9,6,-4], [9,-4,-8,6,-7,2,-1,5,-3], [-6,-3,-1,-5,-4,-9,7,-8,2] ],
                
                [ [4,3,-9,-6,-1,-2,-5,-7,8], [-6,7,-1,-5,-8,3,-4,-2,9], [2,-5,-8,4,9,-7,-6,-1,-3], 
                [-8,2,-5,7,4,1,-3,-9,6], [-7,-6,-4,-2,-3,-9,-1,-8,-5], [1,-9,-3,8,6,5,-7,4,-2],
                [-3,-1,-6,-9,2,4,-8,-5,7], [5,-8,-2,1,-7,-6,-9,3,-4], [9,-4,-7,-3,-5,-8,-2,6,1] ] ]
    
    #Draw Instructions that appear for 15 seconds before the game begins
    Draw.clear()
    Draw.setFontSize(20)
    instructions = "Welcome to Sudoku!\n\n\
    To place a number on the board,\n\
    click a number on the pallet at the \n\
    bottom of the screen and click on\n\
    the square on the board where it belongs.\n\n\
    If you are correct, you will gain a point.\n\n\
    If you are incorrect, you will lose a point.\n\n\
    This is the Easy Level.\n\n\
    Once this board is complete,\n\
    you will move on to the Medium Level.\n\n\
    Once the Medium board is complete,\n\
    you will finally move on to the Hard Level!\n\n\
    Enjoy and Good Luck!" 
    Draw.setColor(Draw.DARK_BLUE)
    newColor = Draw.color(180, 210, 230)
    Draw.setBackground(newColor)
    Draw.string(instructions, 20, 20)
    Draw.show()
    time.sleep(15)
    
    #This is a loop to play each of the 3 boards. Once the user won by filling 
    #in one entire board with the correct numbers, clear the board, display 
    #that the user won, leaving the screen on for 5 seconds, and then the loop 
    #displays the next board.
    for board in range(len(boards)):
        playGame(boards[board])
        Draw.clear()
        Draw.setFontBold(True)
        Draw.setFontSize(50)  
        Draw.string("YOU WON!", 115, 225)
        Draw.show() 
        time.sleep(5)
        Draw.setFontBold(False)        
main()
